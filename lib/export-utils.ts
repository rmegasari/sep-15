import jsPDF from "jspdf"
import autoTable from "jspdf-autotable"
import * as XLSX from "xlsx"

export interface ExportTransaction {
  id: string
  date: string
  description: string
  category: string
  subCategory: string
  amount: number
  account: string
}

export class ExportService {
  static exportToCSV(transactions: ExportTransaction[], filename = "transactions") {
    if (transactions.length === 0) {
      alert("Tidak ada data untuk diexport.")
      return
    }

    const headers = ["ID", "Tanggal", "Deskripsi", "Kategori", "Sub-Kategori", "Jumlah", "Akun"]
    const csvRows = [
      headers.join(","),
      ...transactions.map((tx) =>
        [
          tx.id,
          tx.date,
          `"${tx.description.replace(/"/g, '""')}"`,
          `"${tx.category}"`,
          `"${tx.subCategory || ""}"`,
          tx.amount,
          `"${tx.account}"`,
        ].join(","),
      ),
    ]

    const csvString = csvRows.join("\n")
    const blob = new Blob([csvString], { type: "text/csv;charset=utf-8;" })
    const link = document.createElement("a")

    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob)
      link.setAttribute("href", url)
      link.setAttribute("download", `${filename}_${new Date().toISOString().split("T")[0]}.csv`)
      link.style.visibility = "hidden"
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
      URL.revokeObjectURL(url)
    }
  }

  static exportToXLSX(transactions: ExportTransaction[], filename = "transactions") {
    if (transactions.length === 0) {
      alert("Tidak ada data untuk diexport.")
      return
    }

    const worksheet = XLSX.utils.json_to_sheet(
      transactions.map((tx) => ({
        ID: tx.id,
        Tanggal: tx.date,
        Deskripsi: tx.description,
        Kategori: tx.category,
        "Sub-Kategori": tx.subCategory || "",
        Jumlah: tx.amount,
        Akun: tx.account,
      })),
    )

    const workbook = XLSX.utils.book_new()
    XLSX.utils.book_append_sheet(workbook, worksheet, "Transactions")

    XLSX.writeFile(workbook, `${filename}_${new Date().toISOString().split("T")[0]}.xlsx`)
  }

  static exportToPDF(transactions: ExportTransaction[], filename = "transactions") {
    if (transactions.length === 0) {
      alert("Tidak ada data untuk diexport.")
      return
    }

    const doc = new jsPDF()

    // Header with bold border
    doc.setFillColor(255, 255, 255)
    doc.rect(10, 10, 190, 30, "FD")
    doc.setLineWidth(2)
    doc.rect(10, 10, 190, 30)

    // Title with neobrutalist font
    doc.setFontSize(24)
    doc.setFont("helvetica", "bold")
    doc.text("LAPORAN TRANSAKSI", 105, 25, { align: "center" })

    // Subtitle with border
    doc.setFillColor(240, 240, 240)
    doc.rect(10, 45, 190, 15, "FD")
    doc.setLineWidth(1)
    doc.rect(10, 45, 190, 15)
    doc.setFontSize(12)
    doc.text(`Periode: ${new Date().toLocaleDateString("id-ID")}`, 15, 55)

    // Summary box with thick border
    const totalIncome = transactions.filter((t) => t.amount > 0).reduce((sum, t) => sum + t.amount, 0)
    const totalExpense = transactions.filter((t) => t.amount < 0).reduce((sum, t) => sum + Math.abs(t.amount), 0)

    doc.setFillColor(255, 255, 255)
    doc.rect(10, 65, 190, 25, "FD")
    doc.setLineWidth(2)
    doc.rect(10, 65, 190, 25)

    doc.setFontSize(10)
    doc.setFont("helvetica", "bold")
    doc.text(`Total Pemasukan: Rp ${totalIncome.toLocaleString("id-ID")}`, 15, 75)
    doc.text(`Total Pengeluaran: Rp ${totalExpense.toLocaleString("id-ID")}`, 15, 85)

    // Table with neobrutalist styling
    autoTable(doc, {
      head: [["Tanggal", "Deskripsi", "Kategori", "Sub-Kategori", "Jumlah", "Akun"]],
      body: transactions.map((tx) => [
        tx.date,
        tx.description,
        tx.category,
        tx.subCategory || "-",
        `Rp ${tx.amount.toLocaleString("id-ID")}`,
        tx.account,
      ]),
      startY: 95,
      styles: {
        fontSize: 8,
        cellPadding: 3,
        lineColor: [0, 0, 0],
        lineWidth: 1,
      },
      headStyles: {
        fillColor: [255, 255, 255],
        textColor: [0, 0, 0],
        fontStyle: "bold",
        lineWidth: 2,
      },
      bodyStyles: {
        fillColor: [255, 255, 255],
        textColor: [0, 0, 0],
      },
      alternateRowStyles: {
        fillColor: [248, 248, 248],
      },
      tableLineColor: [0, 0, 0],
      tableLineWidth: 2,
    })

    // Footer with border
    const pageCount = doc.getNumberOfPages()
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i)
      doc.setLineWidth(2)
      doc.rect(10, 280, 190, 15)
      doc.setFontSize(8)
      doc.text(`Halaman ${i} dari ${pageCount} - Generated by Brankas Pribadi`, 105, 290, { align: "center" })
    }

    doc.save(`${filename}_${new Date().toISOString().split("T")[0]}.pdf`)
  }

  static formatCurrency(amount: number): string {
    return new Intl.NumberFormat("id-ID", {
      style: "currency",
      currency: "IDR",
      minimumFractionDigits: 0,
    }).format(amount)
  }
}
